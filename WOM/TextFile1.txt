Наследование - тип связи между обьектами,
используется для создания поолиморфизма -
различных реализаций одного интерфейса

Свойства - гибрид поля с аксессором для которого используется операторы =, имя для геттеров
Для создания наследника используется опратор ":"
Родитель может быть только один
наследование по умолчанию public

При обращении к элементам класса рекомендуется	указывать префикс "base" или "this" для снятия неоднозначности


Перегрузка операторов
Так как С# ООП, процедур/ фунуций нет, и все операторы - члены классов 
Реализуются статически - принадлежат классу, но не объекту
в параметрах оператора указываются все "учасники"
В C# некоторые операторы обязательно перегружать парами:

"==" - "!="
"<" - ">"
Особую роль играют индексатооры - перегруженные []
они перегружаются у обьекта

Исключения - механизм управления порядком выполнения кода
позволяющий прервать выполнение и перейти в другую точку
Для изменения порядка выполнения программы исключнения выбрасывают
throw new Exception("Message") 

После исключение будет перехоодить из блока в блок пока не будет поймано 
Если исключение не обработано - то выполнение программы прерывается 
Считается плохим подходом, когда исключение может дойти до верха программы

try{

.....

if(....) throw new type1("Message 1")
if(....) throw new type2("Message 2")
if(....) throw new type3("Message 3")


}
catch(type1 ex){

//обработка исключения 
return;

}
catch(type2 ex){

}
finally{
этот блок выполнится в любом случае даже если в catch есть return
}


Сокразенные формы

try{

}
catch{
}

try{}
catch{throw;} - поймать и бросить дальше

try{}
finally{}

try{}
catch(Exception ex){} - ошибка Exception будет перехватывать все исключения
catch(ArgumentException ex){}




Практика

Пространства имен - один из способов создавать организацию проекта

Рекомендуется создавать отдельное пространство имен для папок (файлов)
называть (ПИ) так же как и папки



В нашем случае логично выделить следующие ПИ:

- для типов данных (Complex, Fraction, Matrix, ...) 
- для исключений с нашими типами данных
- для утилит: операций смешанных типов или расширения стандартных операций для НОВЫХ ТИПОВ

Классы:

поля - переменные класса (данные)
методы - функции класса (код) 
свойства - особенность .NET - поля с аксессорами

Рекомендация 
при использовании членов объекта в методов этого же обьекта использовать
явные префиксы this. или base.

Перегрузка операций 
статические члены класса с приемом всех операндов 


В С# семантика определяется типом
- class - ccылочный тип (аналогичен указателю)
-struct - значимый тип (аналогичен переменной)

Преобразование значимого типа в ссылочный называется упаковкой(boxing),
обратное распаковкой (unboxing)

Чаще всего для наблюдается для обобщенных обьектов (generics)
	
list.Add(obj); - в коллекцию добавляется ссылка на обьект
а что если obj - значимый тип? он должен копироватся?
в таком случае он упоковывается явно object(obj) неявно (не пишем ничего)


Методы расширения (Extentions)

дополнительные возможности реализовать поведение существующих классов

Расширения описываются как статические классы

public static class ClassName{

методы расширения - как их статические методы
public static DataType.Complex Reflect(){
типы для которых включается расширение, указывается с префиксом this 

public static DataTypes.Complex Reflect(this DataTypes.Complex c)
        {
            return new DataTypes.Complex { Im = c.Re, Re = c.Im };
        }
}

после подключения using все методы расширения будут доступны































